;;; Model of Poker
;;;

(add-dm
(goal isa game-state state start)
)

(set-all-baselevels -100 10) ;; time offset and number of references

(p start-game
=goal>
isa game-state
model nil
player  nil
state go
=imaginal>
isa  sequence
model =model
player =player
next-move nil
==>
=goal>
player retrieving
+retrieval>
isa  sequence
model =model
player =player

)

(p select-move
=goal>
isa game-state
player retrieving
=imaginal>
isa  sequence
model  =model
player  =player
next-move nil
=retrieval>
isa  sequence
model  =model
player  =player
next-move =move3
==>
=goal>
model  =move3
player nil
)


(p move-retrieval-failure-A
=goal>
isa  game-state
player retrieving
?retrieval>
state  error
==>
=goal>
model  raise
player nil
)

(p move-retrieval-failure-B
=goal>
isa  game-state
state  retrieving
?retrieval>
state  error
==>
=goal>
model  fold
player nil
)

(p take-action
=goal>
isa game-state
model =move
player nil
==>
+action>
isa game-state
model =move
=goal>
isa wait
)


(p feedback-start
=goal>
isa wait
state start
=action>
isa game-state
model =model
player =player
==>
+goal>
isa game-state
state go
+imaginal>
isa sequence
model =model
player =player
)


(p feedback
=goal>
isa   wait
=action>
isa game-state
model =model
player =player
=imaginal>
isa  sequence
model  =lastmodel
player  =lastplayer
==>
+goal>
isa game-state
state go
=imaginal>
next-move =player
+imaginal>
isa  sequence
model  =model
player  =player

)


(goal-focus goal)

