;;; Model of Poker
;;;


(add-dm
    (goal isa game-state state start)
)

(set-all-baselevels -100 10) ;; time offset and number of references

(p start-raise
    =goal>
        isa game-state
        state start
        model nil
==>
    =goal>
        model raise
)

(p start-fold
    =goal>
        isa game-state
        state start
        model nil
==>
    =goal>
        model fold
)


(p retrieve-pattern
    =goal>
        isa game-state
        model nil
        player  nil
        winning_scoresA = winning_scoresA
        state go
    =imaginal>
        isa  pattern
        model =model
        player =player
        winning_scoresA = winning_scoresA
        next-move nil
==>
    =goal>
        player retrieving
    +retrieval>
        isa  pattern
        model =model
        player =player
        winning_scoresA = winning_scoresA
)

(p select-move
    =goal>
        isa game-state
        player retrieving
    =imaginal>
        isa  pattern
        model  =model
        player  =player
        winning_scoresA = winning_scoresA
        next-move nil
    =retrieval>
        isa  pattern
        model  =model
        player  =player
        winning_scoresA = winning_scoresA
        next-move =move3
==>
    =goal>
        model  =move3
        player nil
)


(p move-retrieval-failure-A
    =goal>
        isa  game-state
        player retrieving
    ?retrieval>
        state  error
==>
    =goal>
        model  raise
        player nil
)

(p move-retrieval-failure-B
    =goal>
        isa  game-state
        state  retrieving
    ?retrieval>
        state  error
==>
    =goal>
        model  fold
        player nil
)

(p take-action
    =goal>
        isa game-state
        model =move
        player nil
==>
    +action>
        isa game-state
        model =move
    =goal>
        isa wait
)


(p feedback-start
    =goal>
        isa wait
        state start
    =action>
        isa game-state
        model =model
        player =player
        winning_scoresA = winning_scoresA
==>
    +goal>
        isa game-state
        state go
        winning_scoresA = winning_scoresA
    +imaginal>
        isa pattern
        model =model
        player =player
        winning_scoresA = winning_scoresA
)


(p feedback
    =goal>
        isa   wait
    =action>
        isa game-state
        model =model
        player =player
    =imaginal>
        isa  pattern
        model  =lastmodel
        winning_scoresA = lastwinning_scoresA
==>
    +goal>
        isa game-state
        state go
        winning_scoresA = winning_scoresA
    =imaginal>
        next-move =player
    +imaginal>
        isa  pattern
        model  =model
        player  =player
        winning_scoresA = winning_scoresA

)


(goal-focus goal)

